.header {
  height: 85vh;
  background-image: linear-gradient(to right bottom, rgba($color-primary-light, 0.8), rgba($color-primary-dark, 0.8)),
    url("/img/hero-small.jpg");
  background-size: cover;
  background-position: top;
  position: relative;
  //-webkit-clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);
  //clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);

  // since this property is not supported in older browsers, then we can place it in supports feature query
  // you need to always specify the property and its value in the condition line
  // however, the value is obsolete and ignore by browser, hence we specify 0 0, the actual value given in the content will be taken into account
  @supports(clip-path: polygon(0 0)) or (-webkit-clip-path: polygon(0 0)){
    -webkit-clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);
    clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);
    height: 95vh;
  }

  // the , is the equivalent of an 'OR', to avoid having to write two separate media queries with duplicate code
  // 37.5em = 600px, 125em = 2000px
  @media only screen and (min-resolution: 192dpi) and (min-width: 37.5em),
  // -webkit-min-device-pixel-ratio is specific to safari, as min-resolution does not work on safari 
  only screen and (-webkit-min-device-pixel-ratio: 2) and (min-width: 37.5em),
   only screen and (min-width: 125em) {
    background-image: linear-gradient(to right bottom, rgba($color-primary-light, 0.8), rgba($color-primary-dark, 0.8)),
    url("/img/hero.jpg");
  }

  /*
  @media (min-width: 2000px) {
    background-image: linear-gradient(to right bottom, rgba($color-primary-light, 0.8), rgba($color-primary-dark, 0.8)),
    url("/img/hero.jpg");
  }
  */

  @include respond(phone) {
    -webkit-clip-path: polygon(0 0, 100% 0, 100% 85vh, 0 100%);
    clip-path: polygon(0 0, 100% 0, 100% 85vh, 0 100%);
  }

  &__logo-box {
    position: absolute;
    top: 4rem;
    left: 4rem;
  }

  &__logo {
    height: 3.5rem;
  }
  
  &__text-box {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -40%);
    /*Because bnt-white is an inline element, it is treated the same as text so this will also center it */
    text-align: center;
  }
}
