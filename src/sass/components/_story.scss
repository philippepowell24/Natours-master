.story {
  width: 75%;
  margin: 0 auto;
  box-shadow: 0 3rem 6rem rgba($color-black, .1);
  background-color: rgba($color-white, .6);
  border-radius: .3rem;
  padding: 6rem;
  padding-left: 9rem;
  font-size: $default-font-size;
  transform: skewX(-12deg);

  @include respond(tab-port) {
    width: 100%;
    padding: 4rem;
    padding-left: 7rem;
  }

  @include respond(phone) {
    transform: skew(0);
  }

  &__shape {
    width: 15rem;
    height: 15rem;
    float: left;
    //-webkit-shape-outside: circle(50% at 50% 50%);
    // this only works if element is float. The first 50% represents radius of circle, so it will be 50% of the element width/height a.k.a 7.5rem.
    // this only works is the element has defined dimensions a.k.a a defined width and a height
    // the other 50% 50% defines the center of the circle, as the center is placed halfway through height and width inside circle.
    // this property defines how text will wrap around shape
    //shape-outside: circle(50% at 50% 50%);
    // this property actually defines the shape itself
    //clip-path: circle(50% at 50% 50%);
    //-webkit-clip-path: circle(50% at 50% 50%);
    transform: translateX(-3rem) skewX(12deg);
    position: relative;
    overflow: hidden;
    border-radius: 50%;


  // since this property is not supported in older browsers, then we can place it in supports feature query
  // you need to always specify the property and its value in the condition line
  // however, the value is obsolete and ignore by browser, hence we specify 0 0, the actual value given in the content will be taken into account
  @supports(clip-path: polygon(0 0)) or (-webkit-clip-path: polygon(0 0)){
        // this property actually defines the shape itself
        clip-path: circle(50% at 50% 50%);
        -webkit-clip-path: circle(50% at 50% 50%);
        -webkit-shape-outside: circle(50% at 50% 50%);
        shape-outside: circle(50% at 50% 50%);
        border-radius: none;
  }

    @include respond(phone) {
      transform: translateX(-3rem) skew(0);
    }

  }

  &__text {
    transform: skewX(12deg);

    @include respond(phone) {
      transform: skew(0);
    }
  }

  &__img {
    height: 100%;
    transform: translateX(-3rem) scale(1.4);
    backface-visibility: hidden;
    transition: all .5s;
  }

  &__caption {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, 20%);
    color: $color-white;
    text-transform: uppercase;
    font-size: 1.7rem;
    text-align: center;
    opacity: 0;
    transition: all .5s;
    backface-visibility: hidden;

  }

  &:hover &__caption {
    opacity: 1;
    transform: translate(-50%, -50%);
  }

  &:hover &__img {
    transform: translateX(-3rem) scale(1);
    filter: blur(.3rem) brightness(80%);
    
  }
}